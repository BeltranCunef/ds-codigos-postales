{
  "name": "ogr2ogr",
  "version": "1.0.0",
  "description": "ogr2ogr wrapper w/ multiple format support",
  "keywords": [
    "ogr2ogr",
    "stream",
    "proj4",
    "gdal"
  ],
  "author": {
    "name": "Marc Harter",
    "email": "wavded@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/wavded/ogr2ogr.git"
  },
  "homepage": "http://github.com/wavded/ogr2ogr",
  "scripts": {
    "test": "istanbul cover tape \"test/*-test.js\"",
    "docker-build": "docker build --rm -t wavded/ogre .",
    "docker-test": "docker run -t -v `pwd`:/src -w /src wavded/ogre npm test",
    "docker-dev": "docker run -i -t -v `pwd`:/src -w /src wavded/ogre /bin/bash"
  },
  "main": "./index.js",
  "dependencies": {
    "archiver": "^1.1.0",
    "comma-separated-values": "^3.6.0",
    "decompress-zip": "^0.3.0",
    "findit": "^2.0.0",
    "rimraf": "^2.2.8"
  },
  "devDependencies": {
    "istanbul": "^0.4.5",
    "tape": "^4.6.0"
  },
  "engines": {
    "node": "*"
  },
  "readme": "[![Build Status](https://jenkins.adc4gis.com/buildStatus/icon?job=ogr2ogr)](https://jenkins.adc4gis.com/job/ogr2ogr/) [![code-style](https://img.shields.io/badge/code%20style-adc-brightgreen.svg?style=flat)](https://github.com/applieddataconsultants/eslint-config-adc)\n\nogr2ogr enables spatial file conversion and reprojection of spatial data through the use of ogr2ogr (gdal) tool\n\nRequirements\n------------\n\nogr2ogr requires the command line tool *ogr2ogr* - [gdal install page](http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries). It is recommended to use the latest version.\n\nInstallation\n------------\n\n```\nnpm install ogr2ogr\n```\n\n[![NPM](https://nodei.co/npm/ogr2ogr.png?downloads=true)](https://nodei.co/npm/ogr2ogr)\n\nUsage\n-----\n\nogr2ogr takes either a path, a stream, or a GeoJSON object. The result of the transformation can be consumed via callback or stream:\n\n```js\nvar ogr2ogr = require('ogr2ogr')\nvar ogr = ogr2ogr('/path/to/spatial/file')\n\nogr.exec(function (er, data) {\n  if (er) console.error(er)\n  console.log(data)\n})\n\nvar ogr2 = ogr2ogr('/path/to/another/spatial/file')\nogr2.stream().pipe(writeStream)\n```\n\nSee `/examples` for usage examples and `/test/api.js`.\n\nFormats\n-------\n\nThe goal is for ogr2ogr to support most (if not all) formats your underlying ogr2ogr supports. You can see the progress of that in `/tests/drivers.js`.\n\nIt also will:\n\n1.\tExtract zip files for formats that are typically bundled (i.e. shapefiles, kmz, s57, vrt, etc)\n2.\tWill extract geometry from CSVs when a common geometry field can be determined.\n3.\tCleans up after its messes.\n4.\tBundles multi-file conversions as a zip\n5.\tSupport GeoJSON and GeoRSS urls as path inputs\n6.\tSupport raw GeoJSON objects as input\n\nOptions\n-------\n\nogr2ogr takes chainable modifier functions:\n\n```js\nvar shapefile = ogr2ogr('/path/to/spatial/file.geojson')\n\t\t\t\t\t.format('ESRI Shapefile')\n\t\t\t\t\t.skipfailures()\n\t\t\t\t\t.stream()\nshapefile.pipe(fs.createWriteStream('/shapefile.zip'))\n```\n\nAvailable options include:\n\n-\t`.project(dest, src)` - reproject data (defaults to: \"ESPG:4326\")\n-\t`.format(fmt)` - set output format (defaults to: \"GeoJSON\")\n-\t`.timeout(ms)` - milliseconds before ogr2ogr is killed (defaults to: 15000)\n-\t`.skipfailures()` - skip failures (continue after failure, skipping failed feature -- by default failures are not skipped)\n-\t`.options(arr)` - array of custom org2ogr arguments (e.g. `['-fieldmap', '2,-1,4']`\\)\n-\t`.destination(str)` - ogr2ogr destination (directly tell ogr2ogr where the output should go, useful for writing to databases)\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2016 Marc Harter &lt;wavded@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/wavded/ogr2ogr/issues"
  },
  "_id": "ogr2ogr@1.0.0",
  "dist": {
    "shasum": "fcdfc41b0b09fce7db0ac955aa403b27c3ec46ec"
  },
  "_from": "ogr2ogr@",
  "_resolved": "https://registry.npmjs.org/ogr2ogr/-/ogr2ogr-1.0.0.tgz"
}
